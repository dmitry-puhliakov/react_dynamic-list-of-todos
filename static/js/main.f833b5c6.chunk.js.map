{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","onUserSelect","onChangeSearchField","onChangeSelect","className","type","onChange","event","target","value","name","map","id","userId","title","completed","cn","key","checked","readOnly","onClick","getData","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","state","user","this","props","data","setState","prevPops","email","phone","onClear","React","Component","App","showTodos","selectedUserId","setSelectedUserId","resetSelectedUserId","setFilterByTitle","fieldContent","filter","todo","String","includes","setDisplayBySelect","selectedValue","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f833b5c6.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  onUserSelect,\n  onChangeSearchField,\n  onChangeSelect,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <div className=\"TodoList__form\">\n        <input\n          className=\"TodoList__search\"\n          type=\"text\"\n          onChange={(event) => {\n            onChangeSearchField(event.target.value);\n          }}\n        />\n        <select\n          className=\"TodoList__search\"\n          name=\"completed\"\n          onChange={(event) => {\n            onChangeSelect(event.target.value);\n          }}\n        >\n          <option value=\"all\">all</option>\n          <option value=\"false\">active</option>\n          <option value=\"true\">completed</option>\n        </select>\n      </div>\n\n      <ul className=\"TodoList__list\">\n        {todos.map(({ id, userId, title, completed }) => (\n          <li\n            className={cn(\n              'TodoList__item',\n              {\n                'TodoList__item--unchecked': !completed,\n                'TodoList__item--checked': completed,\n              },\n            )}\n            key={id}\n          >\n            <label>\n              <input type=\"checkbox\" checked={completed} readOnly />\n              <p>{title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => onUserSelect(userId)}\n            >\n              User&nbsp;#\n              {userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    userId: PropTypes.number,\n  })).isRequired,\n  onUserSelect: PropTypes.func.isRequired,\n  onChangeSearchField: PropTypes.func.isRequired,\n  onChangeSelect: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nexport function getData(url) {\n  return fetch(BASE_URL + url)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getData } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getData(`users/${this.props.userId}`)\n      .then(({ data }) => this.setState({ user: { ...data } }));\n  }\n\n  componentDidUpdate(prevPops) {\n    if (prevPops.userId !== this.props.userId) {\n      getData(`users/${this.props.userId}`)\n        .then(({ data }) => this.setState({ user: { ...data } }));\n    }\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{name}</h3>\n          <p className=\"CurrentUser__email\">{email}</p>\n          <p className=\"CurrentUser__phone\">{phone}</p>\n        </div>\n\n        <button type=\"button\" onClick={this.props.onClear}>\n          clear\n        </button>\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getData } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    showTodos: null,\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getData('todos')\n      .then(({ data }) => this.setState({ todos: [...data] }));\n  }\n\n  setSelectedUserId = (selectedUserId) => {\n    if (selectedUserId !== this.state.selectedUserId) {\n      this.setState({ selectedUserId });\n    }\n  };\n\n  resetSelectedUserId = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  setFilterByTitle = (fieldContent) => {\n    this.setState(state => ({\n      showTodos: fieldContent === ''\n        ? null\n        : state.todos.filter(todo => (\n          String(todo.title).includes(fieldContent)\n        )),\n    }));\n  };\n\n  setDisplayBySelect = (selectedValue) => {\n    this.setState(state => ({\n      showTodos: selectedValue === 'all'\n        ? null\n        : state.todos.filter(todo => (\n          String(todo.completed) === selectedValue)),\n    }));\n  }\n\n  render() {\n    const { todos, showTodos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {this.state.selectedUserId}\n          <TodoList\n            todos={showTodos || todos}\n            onUserSelect={this.setSelectedUserId}\n            onChangeSearchField={this.setFilterByTitle}\n            onChangeSelect={this.setDisplayBySelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId\n              ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  onClear={this.resetSelectedUserId}\n                />\n              )\n              : 'No user selected'\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}